{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","setCaption","image","setImage","progress","setProgress","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","userName","setUserName","email","setEmail","setUser","password","setPassword","React","modalStyle","onAuthStateChanged","authUser","id","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.62bf9e40.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyA5IUOgcAkvl0sAtRXf3eK9ZPn_qIIBU8E\",\n    authDomain: \"instagram-clone-9b76b.firebaseapp.com\",\n    databaseURL: \"https://instagram-clone-9b76b.firebaseio.com\",\n    projectId: \"instagram-clone-9b76b\",\n    storageBucket: \"instagram-clone-9b76b.appspot.com\",\n    messagingSenderId: \"383063868568\",\n    appId: \"1:383063868568:web:cbba2d75d8cc3526ed3ced\",\n    measurementId: \"G-TQN3QQKZK8\"\n})\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\n\nexport {db, auth, storage};","import React, { useState, useEffect } from 'react';\nimport { Avatar } from '@material-ui/core';\nimport './Post.css';\nimport { db } from './firebase';\nimport firebase from 'firebase'\nconst Post = ({postId, user, username, caption, imageUrl}) => {\n    const [comments, setComments] = useState([]);\n    const [comment, setComment] = useState('');\n\n\n\n    const postComment = (e) => {\n        e.preventDefault();\n        db.collection('posts').doc(postId).collection('comments').add({\n            text:comment,\n            username: user.displayName,\n            timestamp:firebase.firestore.FieldValue.serverTimestamp()\n        })\n        setComment('')\n    }\n\n    useEffect(()=>{\n        let unsubscribe;\n        if(postId){\n            unsubscribe = db\n            .collection('posts')\n            .doc(postId)\n            .collection('comments')\n            .orderBy('timestamp', 'desc')\n            .onSnapshot((snapshot) =>{\n                setComments(snapshot.docs.map((doc) => doc.data()));\n            })\n        }\n        return () => {\n            unsubscribe();\n        }\n    }, [postId])\n    return (\n        <div className = 'post'>\n            <div className=\"post_header\">\n                <Avatar className = 'post_avatar' alt=\"Chethan\" src={imageUrl} />\n                <h3>{username}</h3>\n            </div>\n           \n            <img className = 'post_img' src={imageUrl} alt=\"abcd\"/>\n            <h4 className = 'post_text'><strong>Chethan</strong>{caption}</h4>\n\n            <div className=\"post_comments\">\n            {\n                comments.map((comment) => (\n                    <p>\n                        <strong>{comment.username}</strong> : {comment.text}\n                    </p>\n                ))\n            }\n            </div>\n            {\n                user ?\n                (\n                    <form className = 'comment_box'>\n                        <input className = 'post_input'\n                        type = 'text'\n                        placeholder = 'Add a comment'\n                        value = {comment}\n                        onChange = {(e) => {setComment(e.target.value)}}\n                        />\n                    <button className = 'post_button'\n                    type = 'submit' \n                    disabled = {!comment}\n                    onClick = {postComment} >Post</button>\n                    </form>\n                ):\n                ('')\n            }\n           \n            \n        </div>\n    )\n}\n\nexport default Post\n","import React, { useState } from 'react'\nimport { Button } from '@material-ui/core';\nimport firebase from 'firebase'\nimport { storage, db } from './firebase';\nimport './ImageUpload.css'\nconst ImageUpload = ({username}) => {\n    const [caption, setCaption] = useState('');\n    const [image, setImage] = useState(null);\n    const [progress, setProgress] = useState(0);\n\n    const handleChange = (e) =>{\n        if(e.target.files[0]){\n            setImage(e.target.files[0])\n        }\n    }\n\n    const handleUpload = (e) => {\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n        uploadTask.on(\n            'state_changed',\n            (snapshot) => {\n                const progress = Math.round(\n                    (snapshot.bytesTransferred/snapshot.totalBytes)*100\n                );\n                setProgress(progress);\n            },\n            (error) => {\n                alert(error.message)\n            },\n            () => {\n                storage\n                .ref('images')\n                .child(image.name)\n                .getDownloadURL()\n                .then(url => {\n                    db.collection('posts').add({\n                        timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n                        caption:caption,\n                        imageUrl: url,\n                        username:username\n                    });\n                    setProgress(0);\n                    setImage(null);\n                    setCaption('');\n                })\n            }\n        )\n    }\n    return (\n        <div className = 'imageupload'>\n            <progress  className = 'imageupload_progress' value = {progress} max = '100'/>\n            <input type=\"text\" value = {caption} placeholder = 'Enter a caption...' onChange = {(e) => setCaption(e.target.value)}/>\n            <input type=\"file\"  onChange = {handleChange} />\n            <Button onClick = {handleUpload}>Upload</Button>\n        </div>\n    )\n}\n\nexport default ImageUpload\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Post from './Post';\nimport { db, auth } from './firebase';\nimport {Modal, Button, Input} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\nimport ImageUpload from './ImageUpload';\nimport InstagramEmbed from 'react-instagram-embed';\n\n\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n\nfunction App() {\n  const classes = useStyles();\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [userName, setUserName] = useState('');\n  const [email, setEmail] = useState('');\n  const [user, setUser] = useState(null);\n  const [password, setPassword] = useState('');\n  const [modalStyle] = React.useState(getModalStyle);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if(authUser){\n        setUser(authUser);\n      }\n      else{\n        setUser(null);\n      }\n    })\n    return () => {\n      unsubscribe();\n    }\n  }, [user, userName])\n\n\n  useEffect(() => {\n    db.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot =>(\n      setPosts(snapshot.docs.map(doc => ({ id:doc.id, post:doc.data()})))\n    ))\n  }, [])\n\n  const signUp = (e) =>{\n    e.preventDefault();\n    auth.createUserWithEmailAndPassword(email, password)\n    .then((authUser) => {\n      return authUser.user.updateProfile({\n        displayName:userName\n      })\n    })\n    .catch((error) =>  alert(error.message))\n    setOpen(false)\n  }\n\n  const signIn = (e) => {\n    e.preventDefault();\n    auth.signInWithEmailAndPassword(email, password)\n    .catch((error) => alert(error.message))\n    setOpenSignIn(false)\n  }\n \n  return (\n    <div className=\"app\">\n    \n    <Modal\n      open={open}\n      onClose={() => setOpen(false)}\n    >\n      <div style={modalStyle} className= {classes.paper}>\n      <form className = 'app_signup'>\n        <center>\n          <img  className = 'app_headerImg' \n            src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\" alt=\"insta\"/>\n          </center>\n          <Input type = 'text' placeholder = 'Username' value = {userName} onChange = {(e) => setUserName(e.target.value)}/>\n          <Input type = 'text' placeholder = 'Email' value = {email} onChange = {(e) => setEmail(e.target.value)}/>\n          <Input type = 'password' placeholder = 'Password' value = {password}  onChange = {(e) => setPassword(e.target.value)}/>\n          <Button type = 'submit' onClick = {signUp}>Sign Up</Button>\n        </form> \n      </div>\n    </Modal>\n    <Modal\n      open={openSignIn}\n      onClose={() => setOpenSignIn(false)}\n    >\n      <div style={modalStyle} className= {classes.paper}>\n      <form className = 'app_signup'>\n        <center>\n          <img  className = 'app_headerImg' \n            src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\" alt=\"insta\"/>\n          </center>\n          <Input type = 'text' placeholder = 'Email' value = {email} onChange = {(e) => setEmail(e.target.value)} />\n          <Input type = 'password' placeholder = 'Password' value = {password}  onChange = {(e) => setPassword(e.target.value)}/>\n          <Button type = 'submit' onClick = {signIn}>Sign In</Button>\n        </form> \n      </div>\n    </Modal>\n     <div className = 'app_header'>\n        <img  className = 'app_headerImg' \n        src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\" alt=\"insta\"/>\n        {\n          user ?\n          (<Button onClick = {() => auth.signOut()}>Log Out</Button>):\n          ( <div className=\"login_container\">\n              <Button onClick = {() => setOpen(true)}>Sign UP</Button>\n              <Button onClick = {() => setOpenSignIn(true)}>Sign In</Button>\n            </div>\n            )\n        }\n        \n     </div>\n     <div className=\"app_posts\">\n     <div className=\"posts_left\">\n     {\n      posts.map(({id, post}) => (\n       <Post key = {id}  user = {user} postId = {id} username = {post.username} caption = {post.caption} imageUrl = {post.imageUrl} /> \n      ))\n    }\n     </div>\n     \n    <div className=\"posts_right\">\n    <InstagramEmbed\n      url='https://instagr.am/p/Zw9o4/'\n      maxWidth={320}\n      hideCaption={false}\n      containerTagName='div'\n      protocol=''\n      injectScript\n      onLoading={() => {}}\n      onSuccess={() => {}}\n      onAfterRender={() => {}}\n      onFailure={() => {}}\n    />\n    </div>\n     \n    </div>\n     {\n      user?\n      ( \n      <ImageUpload username ={user.displayName}/>\n      ):\n      (\n        <h3>Login to Upload</h3>\n      )\n    }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}